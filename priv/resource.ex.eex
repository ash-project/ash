defmodule <%= @project_name %>.<%= if @context_name, do: "#{@context_name}."%><%= @module_name %> do
  use Ash.Resource<%= if Keyword.get(@cmd_switches, :postgres) do %>,
    data_layer: AshPostgres.DataLayer<% end %><%= if Keyword.get(@cmd_switches, :ets) do %>,
    data_layer: Ash.DataLayer.Ets<% end %><%= if Keyword.get(@cmd_switches, :mnesia) do %>,
    data_layer: Ash.DataLayer.Mnesia<% end %><%= if Keyword.get(@cmd_switches, :json_api) do %>,
    extensions: [AshJsonApi.Resource]<% end %><%= if Keyword.get(@cmd_switches, :policy_authorizer) do %>,
    authorizers: [AshPolicyAuthorizer.Authorizer]<% end %>

<%= for entry <- ~w(postgres csv)a do %>
  <%= if Keyword.get(@cmd_switches, entry) do %>
      <%= Map.get(@templates, entry, "") %>
    <%= if Keyword.get(@cmd_switches, :guides) do %>
        <%= Map.get(@guides, entry, "") %>
    <% end %>
  <% end %>
<% end %>

  attributes do
    uuid_primary_key :id
  <%= for {attribute, attr_type} <- @attributes do %>
    attribute :<%= attribute %>, :<%= attr_type %> do
    end
  <% end %>
  end
<%= if Keyword.get(@cmd_switches, :guides) do %>
  # attribute :public, :boolean do
  #   allow_nil? false
  #   default: false
  # end

  # Alternatively, you can use the keyword list syntax
  # You can also set functional defaults, via passing in a zero
  # argument function or an MFA
  # attribute :public, :boolean, allow_nil?: false, default: false
<% end %>


<%= if Keyword.get(@cmd_switches, :timestamps) do %>
  # This is set on create
  create_timestamp :inserted_at
  # This is updated on all updates
  update_timestamp :updated_at
  <%= if Keyword.get(@cmd_switches, :guides) do %>
  # `create_timestamp` above is just shorthand for:
  # attribute :inserted_at, :utc_datetime_usec,
  # writable?: false,
  # default: &DateTime.utc_now/0
  <% end %>
<% end %>

<%= for entry <- ~w(policy_authorizer json_api graphql)a do %>
  <%= if Keyword.get(@cmd_switches, entry) do %>
      <%= Map.get(@templates, entry, "") %>
    <%= if Keyword.get(@cmd_switches, :guides) do %>
        <%= Map.get(@guides, entry, "") %>
    <% end %>
  <% end %>
<% end %>

  actions do
    create :create
    read :read
    |
    update :update
    destroy :destroy
  end
end
