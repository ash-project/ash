name: Ash CI
on:
  workflow_call:
    secrets:
      HEX_API_KEY:
        required: false
    inputs:
      release:
        type: boolean
        default: true
      publish-docs:
        type: boolean
        default: true
      spark-formatter:
        type: boolean
        default: true
      codegen:
        type: boolean
        default: false
      spark-cheat-sheets:
        type: boolean
        default: true
      sobelow:
        type: boolean
        default: true
      postgres:
        type: boolean
        default: false
      ash_postgres:
        type: boolean
        default: true
      ecto_postgres:
        type: boolean
        default: false
      postgres-version:
        type: string
        default: "14"
      sqlite:
        type: boolean
        default: false
      hex-api-key:
        type: string
      rustler-precompiled-module:
        type: string
      sat-solver:
        type: string
        default: "Picosat"
      igniter-upgrade:
        type: boolean
        default: true
      elixir-version:
        type: string
        default: "default"
      erlang-version:
        type: string
        default: "default"
env:
  PG_VERSION: ${{inputs.postgres-version}}
  ASH_CI_BUILD: true
jobs:
  auditor:
    name: audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Update Elixir version in .tool-versions
        if: inputs.elixir-version != 'default'
        run: |
          if [ -f .tool-versions ]; then
            if grep -q "^elixir " .tool-versions; then
              sed -i "s/^elixir .*$/elixir ${{ inputs.elixir-version }}/" .tool-versions
            else
              echo "elixir ${{ inputs.elixir-version }}" >> .tool-versions
            fi
          else
            echo "elixir ${{ inputs.elixir-version }}" > .tool-versions
          fi
      - name: Update Erlang version in .tool-versions
        if: inputs.erlang-version != 'default'
        run: |
          if [ -f .tool-versions ]; then
            if grep -q "^erlang " .tool-versions; then
              sed -i "s/^erlang .*$/erlang ${{ inputs.erlang-version }}/" .tool-versions
            else
              echo "erlang ${{ inputs.erlang-version }}" >> .tool-versions
            fi
          else
            echo "erlang ${{ inputs.erlang-version }}" > .tool-versions
          fi
      - uses: team-alembic/staple-actions/actions/mix-hex-audit@main
      - uses: team-alembic/staple-actions/actions/mix-task@main
        with:
          task: deps.audit
  build-test:
    name: MIX_ENV=test mix.compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Update Elixir version in .tool-versions
        if: inputs.elixir-version != 'default'
        run: |
          if [ -f .tool-versions ]; then
            if grep -q "^elixir " .tool-versions; then
              sed -i "s/^elixir .*$/elixir ${{ inputs.elixir-version }}/" .tool-versions
            else
              echo "elixir ${{ inputs.elixir-version }}" >> .tool-versions
            fi
          else
            echo "elixir ${{ inputs.elixir-version }}" > .tool-versions
          fi
      - name: Update Erlang version in .tool-versions
        if: inputs.erlang-version != 'default'
        run: |
          if [ -f .tool-versions ]; then
            if grep -q "^erlang " .tool-versions; then
              sed -i "s/^erlang .*$/erlang ${{ inputs.erlang-version }}/" .tool-versions
            else
              echo "erlang ${{ inputs.erlang-version }}" >> .tool-versions
            fi
          else
            echo "erlang ${{ inputs.erlang-version }}" > .tool-versions
          fi
      - uses: team-alembic/staple-actions/actions/install-elixir@main
      - uses: team-alembic/staple-actions/actions/mix-compile@main
        with:
          mix-env: test
  build-docs:
    name: mix docs
    runs-on: ubuntu-latest
    if: ${{inputs.publish-docs}}
    needs:
      - build-test
      - spark-cheat-sheets
    steps:
      - uses: actions/checkout@v3
      - uses: team-alembic/staple-actions/actions/mix-docs@main
        with:
          mix-env: dev
          use-cache: false
      - uses: actions/upload-pages-artifact@v3
        with:
          path: doc/
  deploy-docs:
    name: Deploy docs to GitHub pages.
    runs-on: ubuntu-latest
    needs:
      - build-test
      - build-docs
    if: ${{inputs.publish-docs && github.ref == 'refs/heads/main'}}
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub pages
        id: deployment
        uses: actions/deploy-pages@v4

  formatter:
    name: mix format --check-formatted
    runs-on: ubuntu-latest
    needs:
      - build-test
    steps:
      - uses: actions/checkout@v3
      - uses: team-alembic/staple-actions/actions/mix-format@main
        with:
          mix-env: test

  spark-formatter:
    name: mix spark.formatter --check
    runs-on: ubuntu-latest
    needs:
      - build-test
    steps:
      - uses: actions/checkout@v3
      - uses: team-alembic/staple-actions/actions/mix-task@main
        if: ${{inputs.spark-formatter}}
        with:
          mix-env: test
          task: spark.formatter --check

  spark-cheat-sheets:
    name: mix spark.cheat_sheets --check
    runs-on: ubuntu-latest
    needs:
      - build-test
    steps:
      - uses: actions/checkout@v3
      - uses: team-alembic/staple-actions/actions/mix-task@main
        if: ${{inputs.spark-cheat-sheets}}
        with:
          mix-env: test
          task: spark.cheat_sheets --dry-run --yes
      - uses: team-alembic/staple-actions/actions/mix-task@main
        if: ${{inputs.spark-cheat-sheets}}
        with:
          mix-env: test
          task: spark.cheat_sheets --check
  sobelow:
    name: mix sobelow
    runs-on: ubuntu-latest
    needs:
      - build-test
    steps:
      - uses: actions/checkout@v3
      - uses: team-alembic/staple-actions/actions/mix-task@main
        if: ${{inputs.sobelow}}
        with:
          mix-env: test
          task: sobelow
  credo:
    name: mix credo --strict
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v3
      - uses: team-alembic/staple-actions/actions/mix-credo@main
        if: ${{inputs.spark-formatter}}
        with:
          mix-env: test
  codegen:
    name: mix ash.codegen --check
    runs-on: ubuntu-latest
    needs:
      - build-test
    if: ${{inputs.codegen}}
    steps:
      - uses: actions/checkout@v3
      - uses: team-alembic/staple-actions/actions/mix-task@main
        with:
          mix-env: test
          task: ash.codegen --check
  unused-deps:
    name: mix deps.unlock --check-unused
    runs-on: ubuntu-latest
    needs:
      - build-test
    steps:
      - uses: actions/checkout@v3
      - uses: team-alembic/staple-actions/actions/mix-task@main
        with:
          mix-env: test
          task: deps.unlock --check-unused
  igniter-upgrade:
    name: mix igniter.upgrade
    runs-on: ubuntu-latest
    if: ${{inputs.igniter-upgrade}}
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write
    steps:
      - name: Dependabot metadata
        id: dependabot-metadata
        uses: dependabot/fetch-metadata@v2
        if: github.event.pull_request.user.login == 'dependabot[bot]'
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
        if: github.event.pull_request.user.login == 'dependabot[bot]'
      - uses: team-alembic/staple-actions/actions/mix-task@main
        with:
          task: igniter.upgrade --git-ci --yes
        if: github.event.pull_request.user.login == 'dependabot[bot]'
      - name: Commit Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        if: github.event.pull_request.user.login == 'dependabot[bot]'
        with:
          commit_message: "[dependabot skip] Apply Igniter Upgrades"
          commit_user_name: dependabot[bot]
  test:
    name: mix test
    runs-on: ubuntu-latest
    needs:
      - build-test
    services:
      postgres:
        image: postgres:${{inputs.postgres-version}}
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          TZ: 'UTC'
          PGTZ: 'UTC'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: team-alembic/staple-actions/actions/mix-task@main
        if: ${{inputs.postgres && inputs.ash_postgres}}
        with:
          mix-env: test
          task: ash_postgres.generate_migrations --check
      - uses: team-alembic/staple-actions/actions/mix-task@main
        with:
          mix-env: test
          task: ash_postgres.create
        if: ${{inputs.postgres && inputs.ash_postgres}}
      - uses: team-alembic/staple-actions/actions/mix-task@main
        with:
          mix-env: test
          task: ecto.create
        if: ${{inputs.postgres && inputs.ecto_postgres}}
      - uses: team-alembic/staple-actions/actions/mix-task@main
        with:
          mix-env: test
          task: ash_postgres.migrate
        if: ${{inputs.postgres && inputs.ash_postgres}}
      - uses: team-alembic/staple-actions/actions/mix-task@main
        with:
          mix-env: test
          task: ash_postgres.migrate --tenants
        if: ${{inputs.postgres && inputs.ash_postgres}}
      - uses: team-alembic/staple-actions/actions/mix-task@main
        with:
          mix-env: test
          task: ecto.migrate
        if: ${{inputs.postgres && inputs.ecto_postgres}}
      - uses: team-alembic/staple-actions/actions/mix-task@main
        with:
          mix-env: test
          task: ash_sqlite.generate_migrations --check
        if: ${{inputs.sqlite}}
      - uses: team-alembic/staple-actions/actions/mix-task@main
        with:
          mix-env: test
          task: ash_sqlite.create
        if: ${{inputs.sqlite}}
      - uses: team-alembic/staple-actions/actions/mix-task@main
        with:
          mix-env: test
          task: ash_sqlite.migrate
        if: ${{inputs.sqlite}}
      - uses: team-alembic/staple-actions/actions/mix-test@main
        with:
          mix-env: test
        env:
          PGUSER: postgres
          PGPASS: postgres
          PGHOST: postgres

  dialyzer:
    name: mix dialyzer
    runs-on: ubuntu-latest
    needs:
      - build-test
    steps:
      - uses: actions/checkout@v3
      - uses: team-alembic/staple-actions/actions/mix-dialyzer@main
        with:
          mix-env: dev

  build-dev:
    name: MIX_ENV=dev mix.compile
    runs-on: ubuntu-latest
    needs:
      - build-test
    steps:
      - uses: actions/checkout@v3
      - uses: team-alembic/staple-actions/actions/mix-compile@main
        with:
          mix-env: dev
  build-release:
     name: NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }})
     runs-on: ${{ matrix.job.os }}
     if: ${{ always() && !failure() && !cancelled() && inputs.rustler-precompiled-module && startsWith(github.ref, 'refs/tags/v') }}
     needs:
      - credo
      - unused-deps
      - spark-formatter
      - spark-cheat-sheets
      - igniter-upgrade
      - sobelow
      - formatter
      - auditor
      - test
      - dialyzer
      - build-dev
     permissions:
       contents: write
     strategy:
       fail-fast: false
       matrix:
         # we list the oldest OTP version that supports all features needed, have a look at the
         # erlang docs for the OTP version to see which NIF version is in which OTP release
         # https://github.com/erlang/otp/blob/master/erts/emulator/beam/erl_nif.h
         # - "2.15" # OTP 22, OTP 23
         # - "2.16" # OTP 24, OTP 25
         # - "2.17" # OTP 26
         nif: ["2.15"]
         job:
           # cranelift-codegen panics at 'error when identifying target: "no supported isa found for arch `arm`"'
           # - { target: arm-unknown-linux-gnueabihf , os: ubuntu-20.04 , use-cross: true }
           - { target: aarch64-unknown-linux-gnu, os: ubuntu-20.04, use-cross: true }
           - { target: aarch64-unknown-linux-musl, os: ubuntu-20.04, use-cross: true }
           - { target: aarch64-apple-darwin, os: macos-15 }
           - { target: x86_64-apple-darwin, os: macos-15 }
           - { target: x86_64-unknown-linux-gnu, os: ubuntu-20.04 }
           - { target: x86_64-unknown-linux-musl, os: ubuntu-20.04, use-cross: true }
           - { target: riscv64gc-unknown-linux-gnu, os: ubuntu-20.04, use-cross: true, cargo-args: "--no-default-features"}
           - { target: x86_64-pc-windows-gnu, os: windows-2022 }
           - { target: x86_64-pc-windows-msvc, os: windows-2022 }
           - { target: x86_64-unknown-freebsd, os: ubuntu-22.04, use-cross: true, cross-version: v0.2.5 }

     steps:
       - name: Checkout source code
         uses: actions/checkout@v4

       - name: Extract crate information
         shell: bash
         run: |
           # Get the project version from mix.exs
           echo "PROJECT_VERSION=$(sed -n 's/^  @version "\(.*\)"/\1/p' mix.exs | head -n1)" >> $GITHUB_ENV
       - name: Add target
         shell: bash
         run: |
           rustup target add ${{ matrix.job.target }}
       - uses: Swatinem/rust-cache@v2
         with:
           prefix-key: v0-precomp
           shared-key: ${{ matrix.job.target }}-${{ matrix.nif }}
           workspaces: |
             native/igniter_js
       - name: Build the project
         id: build-crate
         uses: philss/rustler-precompiled-action@v1.1.4
         with:
           project-name: igniter_js
           project-version: ${{ env.PROJECT_VERSION }}
           target: ${{ matrix.job.target }}
           nif-version: ${{ matrix.nif }}
           use-cross: ${{ matrix.job.use-cross }}
           cross-version: ${{ matrix.job.cross-version || 'v0.2.4' }}
           project-dir: "native/igniter_js"
           cargo-args: ${{ matrix.job.cargo-args }}

       - name: Artifact upload
         uses: actions/upload-artifact@v4
         with:
           name: ${{ steps.build-crate.outputs.file-name }}
           path: ${{ steps.build-crate.outputs.file-path }}

       - name: Publish archives and packages
         uses: softprops/action-gh-release@v2
         with:
           files: |
             ${{ steps.build-crate.outputs.file-path }}
         if: startsWith(github.ref, 'refs/tags/v')
  release:
    needs:
      - credo
      - unused-deps
      - spark-formatter
      - build-release
      - spark-cheat-sheets
      - igniter-upgrade
      - sobelow
      - formatter
      - auditor
      - test
      - dialyzer
      - build-dev
    if: ${{ inputs.release && always() && !failure() && !cancelled() && startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    name: Release
    steps:
      - uses: actions/checkout@v3
      - uses: team-alembic/staple-actions/actions/mix-task@main
        if: ${{inputs.rustler-precompiled-module}} 
        with:
          task: rustler_precompiled.download ${{inputs.rustler-precompiled-module}} --only-local --all --print
      - uses: team-alembic/staple-actions/actions/mix-hex-publish@main
        with:
          mix-env: dev
          hex-api-key: ${{secrets.HEX_API_KEY}}
